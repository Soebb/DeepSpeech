# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_impl')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_impl')
    _impl = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_impl', [dirname(__file__)])
        except ImportError:
            import _impl
            return _impl
        try:
            _mod = imp.load_module('_impl', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _impl = swig_import_helper()
    del swig_import_helper
else:
    import _impl
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class TokenMetadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TokenMetadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TokenMetadata, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["text"] = _impl.TokenMetadata_text_get
    if _newclass:
        text = _swig_property(_impl.TokenMetadata_text_get)
    __swig_getmethods__["timestep"] = _impl.TokenMetadata_timestep_get
    if _newclass:
        timestep = _swig_property(_impl.TokenMetadata_timestep_get)
    __swig_getmethods__["start_time"] = _impl.TokenMetadata_start_time_get
    if _newclass:
        start_time = _swig_property(_impl.TokenMetadata_start_time_get)

    def __repr__(self):
      return 'TokenMetadata(text=\'{}\', timestep={}, start_time={})'.format(self.text, self.timestep, self.start_time)

TokenMetadata_swigregister = _impl.TokenMetadata_swigregister
TokenMetadata_swigregister(TokenMetadata)

class CandidateTranscript(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CandidateTranscript, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CandidateTranscript, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["tokens"] = _impl.CandidateTranscript_tokens_get
    if _newclass:
        tokens = _swig_property(_impl.CandidateTranscript_tokens_get)
    __swig_getmethods__["confidence"] = _impl.CandidateTranscript_confidence_get
    if _newclass:
        confidence = _swig_property(_impl.CandidateTranscript_confidence_get)

    def __repr__(self):
      tokens_repr = ',\n'.join(repr(i) for i in self.tokens)
      tokens_repr = '\n'.join('  ' + l for l in tokens_repr.split('\n'))
      return 'CandidateTranscript(confidence={}, tokens=[\n{}\n])'.format(self.confidence, tokens_repr)

CandidateTranscript_swigregister = _impl.CandidateTranscript_swigregister
CandidateTranscript_swigregister(CandidateTranscript)

class Metadata(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["transcripts"] = _impl.Metadata_transcripts_get
    if _newclass:
        transcripts = _swig_property(_impl.Metadata_transcripts_get)

    def __repr__(self):
      transcripts_repr = ',\n'.join(repr(i) for i in self.transcripts)
      transcripts_repr = '\n'.join('  ' + l for l in transcripts_repr.split('\n'))
      return 'Metadata(transcripts=[\n{}\n])'.format(transcripts_repr)

    __swig_destroy__ = _impl.delete_Metadata
    __del__ = lambda self: None
Metadata_swigregister = _impl.Metadata_swigregister
Metadata_swigregister(Metadata)

ERR_OK = _impl.ERR_OK
ERR_NO_MODEL = _impl.ERR_NO_MODEL
ERR_INVALID_ALPHABET = _impl.ERR_INVALID_ALPHABET
ERR_INVALID_SHAPE = _impl.ERR_INVALID_SHAPE
ERR_INVALID_SCORER = _impl.ERR_INVALID_SCORER
ERR_MODEL_INCOMPATIBLE = _impl.ERR_MODEL_INCOMPATIBLE
ERR_SCORER_NOT_ENABLED = _impl.ERR_SCORER_NOT_ENABLED
ERR_SCORER_UNREADABLE = _impl.ERR_SCORER_UNREADABLE
ERR_SCORER_INVALID_LM = _impl.ERR_SCORER_INVALID_LM
ERR_SCORER_NO_TRIE = _impl.ERR_SCORER_NO_TRIE
ERR_SCORER_INVALID_TRIE = _impl.ERR_SCORER_INVALID_TRIE
ERR_SCORER_VERSION_MISMATCH = _impl.ERR_SCORER_VERSION_MISMATCH
ERR_FAIL_INIT_MMAP = _impl.ERR_FAIL_INIT_MMAP
ERR_FAIL_INIT_SESS = _impl.ERR_FAIL_INIT_SESS
ERR_FAIL_INTERPRETER = _impl.ERR_FAIL_INTERPRETER
ERR_FAIL_RUN_SESS = _impl.ERR_FAIL_RUN_SESS
ERR_FAIL_CREATE_STREAM = _impl.ERR_FAIL_CREATE_STREAM
ERR_FAIL_READ_PROTOBUF = _impl.ERR_FAIL_READ_PROTOBUF
ERR_FAIL_CREATE_SESS = _impl.ERR_FAIL_CREATE_SESS
ERR_FAIL_CREATE_MODEL = _impl.ERR_FAIL_CREATE_MODEL
ERR_FAIL_INSERT_HOTWORD = _impl.ERR_FAIL_INSERT_HOTWORD
ERR_FAIL_CLEAR_HOTWORD = _impl.ERR_FAIL_CLEAR_HOTWORD
ERR_FAIL_ERASE_HOTWORD = _impl.ERR_FAIL_ERASE_HOTWORD

def CreateModel(aModelPath):
    return _impl.CreateModel(aModelPath)
CreateModel = _impl.CreateModel

def GetModelBeamWidth(aCtx):
    return _impl.GetModelBeamWidth(aCtx)
GetModelBeamWidth = _impl.GetModelBeamWidth

def SetModelBeamWidth(aCtx, aBeamWidth):
    return _impl.SetModelBeamWidth(aCtx, aBeamWidth)
SetModelBeamWidth = _impl.SetModelBeamWidth

def GetModelSampleRate(aCtx):
    return _impl.GetModelSampleRate(aCtx)
GetModelSampleRate = _impl.GetModelSampleRate

def FreeModel(ctx):
    return _impl.FreeModel(ctx)
FreeModel = _impl.FreeModel

def EnableExternalScorer(aCtx, aScorerPath):
    return _impl.EnableExternalScorer(aCtx, aScorerPath)
EnableExternalScorer = _impl.EnableExternalScorer

def AddHotWord(aCtx, word, boost):
    return _impl.AddHotWord(aCtx, word, boost)
AddHotWord = _impl.AddHotWord

def EraseHotWord(aCtx, word):
    return _impl.EraseHotWord(aCtx, word)
EraseHotWord = _impl.EraseHotWord

def ClearHotWords(aCtx):
    return _impl.ClearHotWords(aCtx)
ClearHotWords = _impl.ClearHotWords

def DisableExternalScorer(aCtx):
    return _impl.DisableExternalScorer(aCtx)
DisableExternalScorer = _impl.DisableExternalScorer

def SetScorerAlphaBeta(aCtx, aAlpha, aBeta):
    return _impl.SetScorerAlphaBeta(aCtx, aAlpha, aBeta)
SetScorerAlphaBeta = _impl.SetScorerAlphaBeta

def SpeechToText(aCtx, aBuffer):
    return _impl.SpeechToText(aCtx, aBuffer)
SpeechToText = _impl.SpeechToText

def SpeechToTextWithMetadata(aCtx, aBuffer, aNumResults):
    return _impl.SpeechToTextWithMetadata(aCtx, aBuffer, aNumResults)
SpeechToTextWithMetadata = _impl.SpeechToTextWithMetadata

def CreateStream(aCtx):
    return _impl.CreateStream(aCtx)
CreateStream = _impl.CreateStream

def FeedAudioContent(aSctx, aBuffer):
    return _impl.FeedAudioContent(aSctx, aBuffer)
FeedAudioContent = _impl.FeedAudioContent

def IntermediateDecode(aSctx):
    return _impl.IntermediateDecode(aSctx)
IntermediateDecode = _impl.IntermediateDecode

def IntermediateDecodeWithMetadata(aSctx, aNumResults):
    return _impl.IntermediateDecodeWithMetadata(aSctx, aNumResults)
IntermediateDecodeWithMetadata = _impl.IntermediateDecodeWithMetadata

def FinishStream(aSctx):
    return _impl.FinishStream(aSctx)
FinishStream = _impl.FinishStream

def FinishStreamWithMetadata(aSctx, aNumResults):
    return _impl.FinishStreamWithMetadata(aSctx, aNumResults)
FinishStreamWithMetadata = _impl.FinishStreamWithMetadata

def FreeStream(aSctx):
    return _impl.FreeStream(aSctx)
FreeStream = _impl.FreeStream

def FreeMetadata(m):
    return _impl.FreeMetadata(m)
FreeMetadata = _impl.FreeMetadata

def FreeString(str):
    return _impl.FreeString(str)
FreeString = _impl.FreeString

def Version():
    return _impl.Version()
Version = _impl.Version

def ErrorCodeToErrorMessage(aErrorCode):
    return _impl.ErrorCodeToErrorMessage(aErrorCode)
ErrorCodeToErrorMessage = _impl.ErrorCodeToErrorMessage
# This file is compatible with both classic and new-style classes.


